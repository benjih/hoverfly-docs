<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference-rsses on Hoverfly</title>
    <link>http://hoverfly.io/reference/index.xml</link>
    <description>Recent content in Reference-rsses on Hoverfly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Nov 2016 16:53:14 +0000</lastBuildDate>
    <atom:link href="http://hoverfly.io/reference/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Reference</title>
      <link>http://hoverfly.io/reference/</link>
      <pubDate>Fri, 11 Nov 2016 16:53:14 +0000</pubDate>
      
      <guid>http://hoverfly.io/reference/</guid>
      <description>

&lt;h2 id=&#34;api&#34;&gt;API&lt;/h2&gt;

&lt;h3 id=&#34;get-api-v2-simulation&#34;&gt;GET /api/v2/simulation&lt;/h3&gt;

&lt;p&gt;Gets all simulation data from the running instance of Hoverfly. This includes recordings, templates, delays and metadata.&lt;/p&gt;

&lt;h4 id=&#34;example-response-body&#34;&gt;Example response body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;pairs&amp;quot;: [
      {
        &amp;quot;response&amp;quot;: {
          &amp;quot;status&amp;quot;: 200,
          &amp;quot;body&amp;quot;: &amp;quot;&amp;lt;h1&amp;gt;Matched on recording&amp;lt;/h1&amp;gt;&amp;quot;,
          &amp;quot;encodedBody&amp;quot;: false,
          &amp;quot;headers&amp;quot;: {
            &amp;quot;Content-Type&amp;quot;: [
              &amp;quot;text/html; charset=utf-8&amp;quot;
            ]
          }
        },
        &amp;quot;request&amp;quot;: {
          &amp;quot;requestType&amp;quot;: &amp;quot;recording&amp;quot;,
          &amp;quot;path&amp;quot;: &amp;quot;/&amp;quot;,
          &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
          &amp;quot;destination&amp;quot;: &amp;quot;myhost.io&amp;quot;,
          &amp;quot;scheme&amp;quot;: &amp;quot;https&amp;quot;,
          &amp;quot;query&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;body&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;headers&amp;quot;: {
            &amp;quot;Accept&amp;quot;: [
              &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&amp;quot;
            ],
            &amp;quot;Content-Type&amp;quot;: [
              &amp;quot;text/plain; charset=utf-8&amp;quot;
            ],
            &amp;quot;User-Agent&amp;quot;: [
              &amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&amp;quot;
            ]
          }
        }
      },
      {
        &amp;quot;response&amp;quot;: {
          &amp;quot;status&amp;quot;: 200,
          &amp;quot;body&amp;quot;: &amp;quot;&amp;lt;h1&amp;gt;Matched on template&amp;lt;/h1&amp;gt;&amp;quot;,
          &amp;quot;encodedBody&amp;quot;: false,
          &amp;quot;headers&amp;quot;: {
            &amp;quot;Content-Type&amp;quot;: [
              &amp;quot;text/html; charset=utf-8&amp;quot;
            ]
          }
        },
        &amp;quot;request&amp;quot;: {
          &amp;quot;requestType&amp;quot;: &amp;quot;template&amp;quot;,
          &amp;quot;path&amp;quot;: &amp;quot;/template&amp;quot;,
          &amp;quot;method&amp;quot;: null,
          &amp;quot;destination&amp;quot;: null,
          &amp;quot;scheme&amp;quot;: null,
          &amp;quot;query&amp;quot;: null,
          &amp;quot;body&amp;quot;: null,
          &amp;quot;headers&amp;quot;: null
        }
      }
    ],
    &amp;quot;globalActions&amp;quot;: {
      &amp;quot;delays&amp;quot;: []
    }
  },
  &amp;quot;meta&amp;quot;: {
    &amp;quot;schemaVersion&amp;quot;: &amp;quot;v1&amp;quot;,
    &amp;quot;hoverflyVersion&amp;quot;: &amp;quot;v0.9.0&amp;quot;,
    &amp;quot;timeExported&amp;quot;: &amp;quot;2016-11-11T11:53:52Z&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;put-api-v2-simulation&#34;&gt;PUT /api/v2/simulation&lt;/h3&gt;

&lt;p&gt;Puts simulation into the running instance of Hoverfly, overwriting any existing simulation data.&lt;/p&gt;

&lt;h4 id=&#34;example-request-body&#34;&gt;Example request body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;data&amp;quot;: {
    &amp;quot;pairs&amp;quot;: [
      {
        &amp;quot;response&amp;quot;: {
          &amp;quot;status&amp;quot;: 200,
          &amp;quot;body&amp;quot;: &amp;quot;&amp;lt;h1&amp;gt;Matched on recording&amp;lt;/h1&amp;gt;&amp;quot;,
          &amp;quot;encodedBody&amp;quot;: false,
          &amp;quot;headers&amp;quot;: {
            &amp;quot;Content-Type&amp;quot;: [
              &amp;quot;text/html; charset=utf-8&amp;quot;
            ]
          }
        },
        &amp;quot;request&amp;quot;: {
          &amp;quot;requestType&amp;quot;: &amp;quot;recording&amp;quot;,
          &amp;quot;path&amp;quot;: &amp;quot;/&amp;quot;,
          &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
          &amp;quot;destination&amp;quot;: &amp;quot;myhost.io&amp;quot;,
          &amp;quot;scheme&amp;quot;: &amp;quot;https&amp;quot;,
          &amp;quot;query&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;body&amp;quot;: &amp;quot;&amp;quot;,
          &amp;quot;headers&amp;quot;: {
            &amp;quot;Accept&amp;quot;: [
              &amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&amp;quot;
            ],
            &amp;quot;Content-Type&amp;quot;: [
              &amp;quot;text/plain; charset=utf-8&amp;quot;
            ],
            &amp;quot;User-Agent&amp;quot;: [
              &amp;quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&amp;quot;
            ]
          }
        }
      },
      {
        &amp;quot;response&amp;quot;: {
          &amp;quot;status&amp;quot;: 200,
          &amp;quot;body&amp;quot;: &amp;quot;&amp;lt;h1&amp;gt;Matched on template&amp;lt;/h1&amp;gt;&amp;quot;,
          &amp;quot;encodedBody&amp;quot;: false,
          &amp;quot;headers&amp;quot;: {
            &amp;quot;Content-Type&amp;quot;: [
              &amp;quot;text/html; charset=utf-8&amp;quot;
            ]
          }
        },
        &amp;quot;request&amp;quot;: {
          &amp;quot;requestType&amp;quot;: &amp;quot;template&amp;quot;,
          &amp;quot;path&amp;quot;: &amp;quot;/template&amp;quot;,
          &amp;quot;method&amp;quot;: null,
          &amp;quot;destination&amp;quot;: null,
          &amp;quot;scheme&amp;quot;: null,
          &amp;quot;query&amp;quot;: null,
          &amp;quot;body&amp;quot;: null,
          &amp;quot;headers&amp;quot;: null
        }
      }
    ],
    &amp;quot;globalActions&amp;quot;: {
      &amp;quot;delays&amp;quot;: []
    }
  },
  &amp;quot;meta&amp;quot;: {
    &amp;quot;schemaVersion&amp;quot;: &amp;quot;v1&amp;quot;,
    &amp;quot;hoverflyVersion&amp;quot;: &amp;quot;v0.9.0&amp;quot;,
    &amp;quot;timeExported&amp;quot;: &amp;quot;2016-11-11T11:53:52Z&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-api-v2-hoverfly&#34;&gt;GET /api/v2/hoverfly&lt;/h3&gt;

&lt;p&gt;Gets configuration information from the running instance of Hoverfly.&lt;/p&gt;

&lt;h4 id=&#34;example-response-body-1&#34;&gt;Example response body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
    destination: &amp;quot;.&amp;quot;,
    middleware: &amp;quot;&amp;quot;,
    mode: &amp;quot;simulate&amp;quot;,
    usage: {
        counters: {
            capture: 0,
            modify: 0,
            simulate: 0,
            synthesize: 0
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-api-v2-hoverfly-destination&#34;&gt;GET /api/v2/hoverfly/destination&lt;/h3&gt;

&lt;p&gt;Gets the current destination setting for the running instance of Hoverfly.&lt;/p&gt;

&lt;h4 id=&#34;example-response-body-2&#34;&gt;Example response body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
    destination: &amp;quot;.&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;put-api-v2-hoverfly-destination&#34;&gt;PUT /api/v2/hoverfly/destination&lt;/h3&gt;

&lt;p&gt;Sets a new destination for the running instance of Hoverfly, overwriting the existing destination setting.&lt;/p&gt;

&lt;h4 id=&#34;example-request-body-1&#34;&gt;Example request body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
    destination: &amp;quot;new-destination&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-api-v2-hoverfly-middleware&#34;&gt;GET /api/v2/hoverfly/middleware&lt;/h3&gt;

&lt;p&gt;Gets the middleware value for the running instance of Hoverfly. This will be either an executable command, or an executable command with a path to a middleware script.&lt;/p&gt;

&lt;h4 id=&#34;example-response-body-3&#34;&gt;Example response body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;middleware&amp;quot;: &amp;quot;python ~/middleware.py&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;put-api-v2-hoverfly-middleware&#34;&gt;PUT /api/v2/hoverfly/middleware&lt;/h3&gt;

&lt;p&gt;Sets a new middleware value, overwriting the existing middleware value for the running instance of Hoverfly. The middleware value should be an executable command, or an executable command with a path to a middleware script. The command and the file must be available on the Hoverfly host machine.&lt;/p&gt;

&lt;h4 id=&#34;example-request-body-2&#34;&gt;Example request body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;middleware&amp;quot;: &amp;quot;python ~/new-middleware.py&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-api-v2-hoverfly-mode&#34;&gt;GET /api/v2/hoverfly/mode&lt;/h3&gt;

&lt;p&gt;Gets the mode for the running instance of Hoverfly.&lt;/p&gt;

&lt;h4 id=&#34;example-response-body-4&#34;&gt;Example response body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
    mode: &amp;quot;simulate&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;put-api-v2-hoverfly-mode&#34;&gt;PUT /api/v2/hoverfly/mode&lt;/h3&gt;

&lt;p&gt;Changes the mode of the running instance of Hoverfly.&lt;/p&gt;

&lt;h4 id=&#34;example-request-body-3&#34;&gt;Example request body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
    mode: &amp;quot;simulate&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;get-api-v2-hoverfly-usage&#34;&gt;GET /api/v2/hoverfly/usage&lt;/h3&gt;

&lt;p&gt;Gets metrics information for the running instance of Hoverfly.&lt;/p&gt;

&lt;h4 id=&#34;example-response-body-5&#34;&gt;Example response body&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
	&amp;quot;metrics&amp;quot;: {
		&amp;quot;counters&amp;quot;: {
			&amp;quot;capture&amp;quot;: 0,
			&amp;quot;modify&amp;quot;: 0,
			&amp;quot;simulate&amp;quot;: 0,
			&amp;quot;synthesize&amp;quot;: 0
		}
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;flags-and-environment-variables&#34;&gt;Flags and environment variables&lt;/h2&gt;

&lt;p&gt;Hoverfly can be configured using flags on startup, or using environment variables.&lt;/p&gt;

&lt;h3 id=&#34;authentication&#34;&gt;Authentication&lt;/h3&gt;

&lt;h4 id=&#34;enable-disable-authentication&#34;&gt;Enable/disable authentication&lt;/h4&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-auth &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflyAuthEnabled=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Supply &lt;code&gt;true&lt;/code&gt; to enable authentication. Defaults to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;add-a-new-user&#34;&gt;Add a new user&lt;/h4&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-add -username &amp;lt;string&amp;gt; -password &amp;lt;string&amp;gt; -admin &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Supply &amp;lsquo;-admin false&amp;rsquo; to make this a non-admin user (defaults to &amp;lsquo;true&amp;rsquo;).&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hoverfly -add -username username -password password -admin false   	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates a new non-admin user with the username &amp;lsquo;username&amp;rsquo; and the password &amp;lsquo;password&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;Environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflyAdmin=&amp;quot;username&amp;quot;
export HoverflyAdminPass=&amp;quot;password&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Setting these environment variables will create a new admin user when Hoverfly starts.&lt;/p&gt;

&lt;h4 id=&#34;set-hoverfly-secret&#34;&gt;Set Hoverfly secret&lt;/h4&gt;

&lt;p&gt;By default, a random secret is generated every time Hoverfly starts.&lt;/p&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflySecret=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-api-token-expiration-in-seconds&#34;&gt;Set API token expiration (in seconds)&lt;/h4&gt;

&lt;p&gt;Set to one day by default.&lt;/p&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflyTokenExpiration=&amp;lt;string&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;port-selection&#34;&gt;Port selection&lt;/h3&gt;

&lt;h4 id=&#34;set-the-admin-ui-api-port&#34;&gt;Set the Admin UI/API port&lt;/h4&gt;

&lt;p&gt;Defaults to 8888.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-ap &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AdminPort=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-the-proxy-port&#34;&gt;Set the proxy port&lt;/h4&gt;

&lt;p&gt;Defaults to 8500.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-pp &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export ProxyPort=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;mode-selection-import-middleware&#34;&gt;Mode selection, import &amp;amp; middleware&lt;/h3&gt;

&lt;p&gt;By default, Hoverfly starts in &lt;em&gt;simulate mode&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&#34;set-capture-mode&#34;&gt;Set capture mode&lt;/h4&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-capture
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-synthesize-mode&#34;&gt;Set synthesize mode&lt;/h4&gt;

&lt;p&gt;Requires middleware to be specified.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-synthesize
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;set-modify-mode&#34;&gt;Set modify mode&lt;/h4&gt;

&lt;p&gt;Requires middleware to be specified.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-modify
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;specify-middleware&#34;&gt;Specify middleware&lt;/h4&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-middleware &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Supply the path to the middleware script.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hoverfly -synthesize -middleware &amp;quot;scripts/gen_response.py&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;import-service-data&#34;&gt;Import service data&lt;/h4&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-import &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Import a service data JSON file from file system or URL. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hoverfly -import http://mypage.com/service_x.json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;./hoverfly -import path/to/my/service_x.json      
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflyImport=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflyImport=&amp;quot;http://mypage.com/service_x.json&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;webserver&#34;&gt;Webserver&lt;/h3&gt;

&lt;h4 id=&#34;turn-hoverfly-into-a-simulation-webserver&#34;&gt;Turn Hoverfly into a simulation webserver&lt;/h4&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-webserver
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;destination&#34;&gt;Destination&lt;/h3&gt;

&lt;h4 id=&#34;specify-which-hosts-to-process&#34;&gt;Specify which hosts to process&lt;/h4&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-dest &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./hoverfly -dest fooservice.org -dest barservice.org -dest catservice.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will start Hoverfly in &lt;em&gt;simulate mode&lt;/em&gt;, and only simulate requests that are sent to fooservice.org, barservice.org and catservice.org. Requests to all other hosts will pass through.&lt;/p&gt;

&lt;h4 id=&#34;specify-host-uri&#34;&gt;Specify host URI&lt;/h4&gt;

&lt;p&gt;Use regular expression. Defaults to &amp;ldquo;.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-destination &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;persistence&#34;&gt;Persistence&lt;/h3&gt;

&lt;h4 id=&#34;specify-boltdb-or-in-memory&#34;&gt;Specify BoltDB or in-memory&lt;/h4&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-db &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, Hoverfly uses BoltDB to store data in a file on disk. Use &lt;code&gt;-db memory&lt;/code&gt; to disable this and use in-memory persistence only.&lt;/p&gt;

&lt;h4 id=&#34;set-boltdb-file&#34;&gt;Set BoltDB file&lt;/h4&gt;

&lt;p&gt;By default, a &lt;code&gt;requests.db&lt;/code&gt; file is created in the Hoverfly directory.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-db-path &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflyDB=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The file will be created if it doesn&amp;rsquo;t exist.&lt;/p&gt;

&lt;h3 id=&#34;tls-certificate-management&#34;&gt;TLS &amp;amp; Certificate management&lt;/h3&gt;

&lt;h4 id=&#34;generate-certificate&#34;&gt;Generate certificate&lt;/h4&gt;

&lt;p&gt;Hoverfly will generate private and public keys in the current directory.&lt;/p&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-generate-ca-cert -cert-name &amp;lt;string&amp;gt; -cert-org &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Certificate name defaults to &amp;ldquo;hoverfly.proxy&amp;rdquo;. Organization name defaults to &amp;ldquo;Hoverfly Authority&amp;rdquo;.&lt;/p&gt;

&lt;h4 id=&#34;use-certificate-and-key&#34;&gt;Use certificate and key&lt;/h4&gt;

&lt;p&gt;Supply paths to certificate and key file.&lt;/p&gt;

&lt;p&gt;Flags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-cert &amp;lt;string&amp;gt; -key &amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;turn-off-tls-verification&#34;&gt;Turn off TLS verification&lt;/h4&gt;

&lt;p&gt;Defaults to &amp;ldquo;true&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-tls-verification=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Environment variable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export HoverflyTlsVerification=&amp;lt;string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;logging-metrics&#34;&gt;Logging &amp;amp; metrics&lt;/h3&gt;

&lt;h4 id=&#34;enable-verbose-mode&#34;&gt;Enable verbose mode&lt;/h4&gt;

&lt;p&gt;Logs every proxy request to STDOUT.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-v
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;enable-metrics-logging&#34;&gt;Enable metrics logging&lt;/h4&gt;

&lt;p&gt;Logs metrics to STDOUT.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-metrics
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;misc&#34;&gt;Misc&lt;/h3&gt;

&lt;h4 id=&#34;use-uncompiled-static-files&#34;&gt;Use uncompiled static files&lt;/h4&gt;

&lt;p&gt;Serve Admin UI static files directly from ./static/dist instead from statik binary.&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;get-version&#34;&gt;Get version&lt;/h4&gt;

&lt;p&gt;Get the version of Hoverfly&lt;/p&gt;

&lt;p&gt;Flag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-version   
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;hoverctl&#34;&gt;Hoverctl&lt;/h2&gt;

&lt;p&gt;Hoverctl is a command line tool bundled with Hoverfly. The purpose of hoverctl is to help in the managing of one or many instances of Hoverfly. Hoverctl does not support all the functionality of Hoverfly yet, but its feature set is growing.&lt;/p&gt;

&lt;h3 id=&#34;hoverfly-directory&#34;&gt;.hoverfly directory&lt;/h3&gt;

&lt;p&gt;Hoverctl stores its state in a &lt;code&gt;.hoverfly&lt;/code&gt; directory. Hoverctl will create this directory in your home folder the first time it needs to save state. This directory is used for the configuration for Hoverfly, the process identifiers and the log files. Hoverctl will always check the working directory before your home directory when looking for the &lt;code&gt;.hoverfly&lt;/code&gt; directory. This allows for multiple configurations on a per project basis if you require different configurations for Hoverfly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.hoverfly/config.yaml
.hoverfly/hoverfly.8888.8500.pid
.hoverfly/hoverfly.8888.8500.log
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;

&lt;p&gt;Currently, there are six configuration keys needed to use hoverctl.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hoverfly.host&lt;/code&gt; is used to determine the host address of the Hoverfly you are trying to control.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hoverfly.admin.port&lt;/code&gt; is used to determine the port that you would like to access the admin interface from.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hoverfly.proxy.port&lt;/code&gt; is used to determine the port that you would the proxy to run on.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hoverfly.username&lt;/code&gt; is the username you use to access your authenticated Hoverfly.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hoverfly.password&lt;/code&gt; is the password you use to access your authenticated Hoverfly.&lt;/p&gt;

&lt;h3 id=&#34;pid-and-log-files&#34;&gt;Pid and log files&lt;/h3&gt;

&lt;p&gt;For each Hoverfly process created with hoverctl, one file is created to store the process identifier and another for the STDOUT and STDERR of Hoverfly. These files will be named using the hoverfly process with both the admin and proxy ports.&lt;/p&gt;

&lt;h4 id=&#34;hoverctl-commands&#34;&gt;Hoverctl commands&lt;/h4&gt;

&lt;h4 id=&#34;start&#34;&gt;start&lt;/h4&gt;

&lt;p&gt;Hoverctl will let you start a Hoverfly process. For this to work, you need to have the Hoverfly binary on your $PATH. It will start up Hoverfly on the admin and proxy ports as specified in the &lt;code&gt;config.yaml&lt;/code&gt;. There is no limit to the number of Hoverfly processes you can start. The only requirement is that each Hoverfly process has its own unique admin and proxy ports.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, hoverctl will start Hoverfly as a proxy. If you wish to start Hoverfly as a webserver instead:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl start webserver
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;stop&#34;&gt;stop&lt;/h4&gt;

&lt;p&gt;You can also stop Hoverfly processes using Hoverctl.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mode&#34;&gt;mode&lt;/h4&gt;

&lt;p&gt;Using hoverctl, you can find out which mode Hoverfly is running in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also change the mode by specifying the name of mode you want Hoverfly to be in.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl mode capture
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;delete&#34;&gt;delete&lt;/h4&gt;

&lt;p&gt;Hoverfly stores internal state while its running. This state is used for testing your application. Using the delete command, you can specify what you want to delete from Hoverfly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl delete simulations
hoverctl delete delays
hoverctl delete all
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;export&#34;&gt;export&lt;/h4&gt;

&lt;p&gt;Instead of having to save the response from the records API endpoint, you can use the export function to save your simulation to disk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl export simulation.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;import&#34;&gt;import&lt;/h4&gt;

&lt;p&gt;Once you have simulations saved, you can import them into Hoverfly using the import function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl import simulations.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If your simulation file is hosted over HTTP, you can use hoverctl to import it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl import http://example.org/simulation.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have older, v1 simulations, you may still import them using the &lt;code&gt;v1&lt;/code&gt; flag.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl import --v1 old-simulations.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;delays&#34;&gt;delays&lt;/h4&gt;

&lt;p&gt;If you want to apply delays to individual hosts in a simulation (to simulate netwrok latency, for example), you can use the &lt;code&gt;delays&lt;/code&gt; function to supply a JSON file containing the delay configuration or to view delays which have been applied (See &lt;strong&gt;Simulating service latency&lt;/strong&gt; in the &lt;strong&gt;Usage&lt;/strong&gt; section).&lt;/p&gt;

&lt;p&gt;Set delays by supplying JSON file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl delays path/to/my_delays.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show delays that have been set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl delays
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;templates&#34;&gt;templates&lt;/h4&gt;

&lt;p&gt;As well importing request/response data using import, you can also import request templates for partial matching to a response using the &lt;code&gt;templates&lt;/code&gt; function. This function works with a JSON file containing the JSON schema for request templates and responses. (See &lt;strong&gt;Matching requests&lt;/strong&gt; in the &lt;strong&gt;Usage&lt;/strong&gt; section).&lt;/p&gt;

&lt;p&gt;Set templates by supplying JSON file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl templates path/to/my_request_templates.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Show templates that have been set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl templates
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;middleware&#34;&gt;middleware&lt;/h4&gt;

&lt;p&gt;This function is used for getting and setting the middleware being executed by Hoverfly.&lt;/p&gt;

&lt;p&gt;To get the middleware currently being used by Hoverfly&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl middleware
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To set the middleware Hoverfly to use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl middleware &amp;quot;middleware.sh&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value given to the middleware function should be a string that contains either a file path, a command a file path or a URL.&lt;/p&gt;

&lt;h4 id=&#34;logs&#34;&gt;logs&lt;/h4&gt;

&lt;p&gt;Used to get the logs from the instance of Hoverfly started with the hoverctl. This command will return all the logs from when the process was started&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl logs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are trying to debug what is happening and you need to watch the Hoverfly logs, you can use the &lt;code&gt;--follow&lt;/code&gt; flag to tail the logs and watch them in real time.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hoverctl logs --follow
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;hoverctl-flags&#34;&gt;Hoverctl flags&lt;/h3&gt;

&lt;h4 id=&#34;host&#34;&gt;&amp;ndash;host&lt;/h4&gt;

&lt;p&gt;This is a global flag that can be used to override the hoverfly.host configuration value from the config.yaml file.&lt;/p&gt;

&lt;h4 id=&#34;admin-port&#34;&gt;&amp;ndash;admin-port&lt;/h4&gt;

&lt;p&gt;This is a global flag that can be used to override the hoverfly.admin.port configuration value from the config.yaml file.&lt;/p&gt;

&lt;h4 id=&#34;proxy-port&#34;&gt;&amp;ndash;proxy-port&lt;/h4&gt;

&lt;p&gt;This is a global flag that can be used to override the hoverfly.proxy.port configuration value from the config.yaml file.&lt;/p&gt;

&lt;h4 id=&#34;verbose&#34;&gt;&amp;ndash;verbose&lt;/h4&gt;

&lt;p&gt;This is a global flag that can be used to get the verbose logs from hoverctl.&lt;/p&gt;

&lt;h4 id=&#34;version&#34;&gt;&amp;ndash;version&lt;/h4&gt;

&lt;p&gt;This is a global flag that can be used to get the version of hoverctl.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>